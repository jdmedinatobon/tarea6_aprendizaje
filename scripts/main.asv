clc;
clear;

%Trabajo basado en:
%https://www.sciencedirect.com/science/article/pii/S0029801819304767
%El paper del ifac tambien

%Creo que lo que puedo hacer es utilizar lo de dinamicas poblacionales
%distribuidas discretas para generar las trayectorias de cada submarino y
%despues usar el MPC para lograr que siguan esas trayectorias.

%Iteraciones maximas.
max_iter = 100;

%Voy a hacer esa parte primero.
%Por ahora con 3 robots.
%1 conectado con 2, 2 conectado con 3. 3 NO conectado con 1.
n = 3;
n_mono = [1, 2, 1];

%Dimensiones de una piscina olimpica
global beta_x beta_y beta_z

beta_x = 50;
beta_y = 25;
beta_z = 2;

%Con Smith dynamics saturadas
global deltas pos_x_actual

%Variable global con las desviaciones con respecto al lider de cada
%seguidor. El delta en la primera posicion siempre es 0, ya que corresponde
%al lider.
deltas = [0, 1, 2];

%Variable global con las posiciones de cada robot (por ahora solo en x).
%Esto corresponde al r en el paper. La primera posicion es la del lider, lo
%que es c en el paper. La ultima posicion es la de slack.
pos_x_inicial = [0, 10, 20, 120];
pos_x_actual = pos_x_inicial;

pos_x = [pos_x_inicial; zeros(max_iter, n+1)];

%Cell con los vecinos de cada robot.
neighbors = {2, [1 3], 2};

epsilon = calcular_epsilon(neighbors);

for k=1:max_iter
    
    for i=2:n
        suma = 0;
        robot_neighbors = neighbors{i};
        fi = fitness(i);
        
        for r=1:length(robot_neighbors)
            j = robot_neighbors(r);
            
            fj = fitness(j);
            suma = suma + (fi-fj)*theta(i, j, fi, fj)*phi(fi, fj);
        end
    
    pos_x_actual(i) = pos_x_actual(i) + epsilon(i)*suma;
    pos_x(k, i) = pos_x_actual(i);
    
    end
   
end

disp("Termino");

%% Graficas

figure(1);
hold on
for i=1:n
    plot(pos_x(:, i))

%% MPC

%Parametros del modelo
nx = 12;
nu = 6;
ny = 12;

% Puntos de equilibrio
thetas = [0; 0; 0];
omegas = [0; 0; 0];

%% Ecuacion de estado
Ts = 1; %Tiempo de muestreo

sys = ecuacion_estado(equils, Ts);

A_matriz_dt = sys.A;
B_matriz_dt = sys.B;
C_matriz_dt = sys.C;

%% Simulacion en Tiempo
T = 100; %Tiempo de simulacion. En Segundos.

p0 = [0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0];
dtao = [0.1; 0; 0; 0; 0; 0];
tao = equils(13:end) + dtao;

[t_nolin, x_nolin] = ode45(@(t,y) auv_system(t,y,tao), [0, T], ...
    p0);

x_dt = [];
x_dt(1, :) = p0;

for k=1:T/Ts
   x_dt(k+1, :) = A_matriz_dt*x_dt(k, :)' + B_matriz_dt*dtao;
end

x=zeros(size(x_dt));

figure;
hold on
plot(t_nolin, x_nolin(:, 1)', 'r', 'LineWidth', 1);
for i=1:nx
    x(:,i) = x_dt(:,i) + equils(i);
end
plot(0:Ts:T, x(:,1),'k--', 'LineWidth', 2);
legend('No Lin', 'Lin');
xlabel('Tiempo (s)');
ylabel('X (m)');


